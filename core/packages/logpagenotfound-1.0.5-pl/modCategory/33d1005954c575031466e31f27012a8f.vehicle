<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Snippets' => 
    array (
      '85b4ad59f44202cb9e4057516f2a6b8f' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"PageNotFoundLogReport","description":"PageNotFoundLogReport snippet for LogPageNotFound.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\r\\n * PageNotFoundLogReport\\r\\n * Copyright 2011-2015 Bob Ray\\r\\n *\\r\\n * PageNotFoundLogReport is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * PageNotFoundLogReport is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * PageNotFoundLogReport; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package logpagenotfound\\r\\n * @author Bob Ray <http:\\/\\/bobsguides.com>\\r\\n\\r\\n *\\r\\n * Description: The PageNotFoundLogReport snippet presents the contents of the Page Not Found log as a table.\\r\\n *\\r\\n * \\/\\r\\n\\r\\n\\/* Modified: January, 2013 *\\/\\r\\n\\r\\n\\r\\n$file = MODX_CORE_PATH . \'\\/logs\\/pagenotfound.log\';\\r\\n$cellWidth = empty($scriptProperties[\'cell_width\'])? 30 : $scriptProperties[\'cell_width\'];\\r\\nif (isset($_POST[\'clearlog\'])) {\\r\\n    file_put_contents($file, \\"\\");\\r\\n}\\r\\n$tableWidth = empty($scriptProperties[\'table_width\'])? \'80%\' : $scriptProperties[\'table_width\'];\\r\\n$fp = fopen ($file, \'r\');\\r\\n$output = \'\';\\r\\nif ($fp) {\\r\\n    $output = \'<table class=\\"PageNotFoundLog\\" border=\\"1\\" cellpadding=\\"10\\" width=\\"\' . $tableWidth . \'\\">\';\\r\\n    $output .= \\"\\\\n\\" . \'   <tr>\';\\r\\n    $output .= \\"\\\\n\\" .\'      <th width=\\"\' . $cellWidth .  \'\\">Page<\\/th>\';\\r\\n    $output .= \\"\\\\n\\" .\'      <th width=\\"\' . $cellWidth .  \'\\">Time<\\/th>\';\\r\\n    $output .= \\"\\\\n\\" .\'      <th width=\\"\' . $cellWidth .  \'\\">IP<\\/th>\';\\r\\n    $output .= \\"\\\\n\\" .\'      <th width=\\"\' . $cellWidth .  \'\\">Host<\\/th>\';\\r\\n    $output .= \\"\\\\n\\" .\'      <th width=\\"\' . $cellWidth .  \'\\">User Agent<\\/th>\';\\r\\n    $output .= \\"\\\\n\\" .\'      <th width=\\"\' . $cellWidth .  \'\\">Referer<\\/th>\';\\r\\n    $output .= \\"\\\\n\\" .\'   <\\/tr>\';\\r\\n    while (($line = fgets($fp)) !== false) {\\r\\n        $line = trim($line);\\r\\n\\r\\n        if (strpos($line,\'#\' == 0) || empty($line)) continue;\\r\\n        $lineArray = explode(\'`\',$line);\\r\\n        $output .= \\"\\\\n   <tr>\\";\\r\\n        foreach($lineArray as $item) {\\r\\n            $item = urldecode($item);\\r\\n            $item = strip_tags($item);\\r\\n            $item = htmlspecialchars($item, ENT_QUOTES, \'UTF-8\');\\r\\n            $item = str_replace(\'&amp;\', \'&\', $item);\\r\\n            $output .= \\"\\\\n      \\" . \'<td style=\\"word-break:break-all;\\" width=\\"\' . $cellWidth . \'\\">\' . $item . \'<\\/td>\';\\r\\n\\r\\n        }\\r\\n        $output .= \\"\\\\n   <\\/tr>\\";\\r\\n    }\\r\\n    $output .= \\"\\\\n<\\/table>\\";\\r\\n    fclose($fp);\\r\\n} else {\\r\\n    $output = \'Could not open: \' . $file;\\r\\n}\\r\\n\\r\\nreturn $output;","locked":0,"properties":"a:2:{s:11:\\"table_width\\";a:7:{s:4:\\"name\\";s:11:\\"table_width\\";s:4:\\"desc\\";s:21:\\"lpnf_table_width_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"80%\\";s:7:\\"lexicon\\";s:26:\\"logpagenotfound:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"cell_width\\";a:7:{s:4:\\"name\\";s:10:\\"cell_width\\";s:4:\\"desc\\";s:20:\\"lpnf_cell_width_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"30\\";s:7:\\"lexicon\\";s:26:\\"logpagenotfound:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * PageNotFoundLogReport\\r\\n * Copyright 2011-2015 Bob Ray\\r\\n *\\r\\n * PageNotFoundLogReport is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * PageNotFoundLogReport is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * PageNotFoundLogReport; if not, write to the Free Software Foundation, Inc., 59 Temple Place,\\r\\n * Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package logpagenotfound\\r\\n * @author Bob Ray <http:\\/\\/bobsguides.com>\\r\\n\\r\\n *\\r\\n * Description: The PageNotFoundLogReport snippet presents the contents of the Page Not Found log as a table.\\r\\n *\\r\\n * \\/\\r\\n\\r\\n\\/* Modified: January, 2013 *\\/\\r\\n\\r\\n\\r\\n$file = MODX_CORE_PATH . \'\\/logs\\/pagenotfound.log\';\\r\\n$cellWidth = empty($scriptProperties[\'cell_width\'])? 30 : $scriptProperties[\'cell_width\'];\\r\\nif (isset($_POST[\'clearlog\'])) {\\r\\n    file_put_contents($file, \\"\\");\\r\\n}\\r\\n$tableWidth = empty($scriptProperties[\'table_width\'])? \'80%\' : $scriptProperties[\'table_width\'];\\r\\n$fp = fopen ($file, \'r\');\\r\\n$output = \'\';\\r\\nif ($fp) {\\r\\n    $output = \'<table class=\\"PageNotFoundLog\\" border=\\"1\\" cellpadding=\\"10\\" width=\\"\' . $tableWidth . \'\\">\';\\r\\n    $output .= \\"\\\\n\\" . \'   <tr>\';\\r\\n    $output .= \\"\\\\n\\" .\'      <th width=\\"\' . $cellWidth .  \'\\">Page<\\/th>\';\\r\\n    $output .= \\"\\\\n\\" .\'      <th width=\\"\' . $cellWidth .  \'\\">Time<\\/th>\';\\r\\n    $output .= \\"\\\\n\\" .\'      <th width=\\"\' . $cellWidth .  \'\\">IP<\\/th>\';\\r\\n    $output .= \\"\\\\n\\" .\'      <th width=\\"\' . $cellWidth .  \'\\">Host<\\/th>\';\\r\\n    $output .= \\"\\\\n\\" .\'      <th width=\\"\' . $cellWidth .  \'\\">User Agent<\\/th>\';\\r\\n    $output .= \\"\\\\n\\" .\'      <th width=\\"\' . $cellWidth .  \'\\">Referer<\\/th>\';\\r\\n    $output .= \\"\\\\n\\" .\'   <\\/tr>\';\\r\\n    while (($line = fgets($fp)) !== false) {\\r\\n        $line = trim($line);\\r\\n\\r\\n        if (strpos($line,\'#\' == 0) || empty($line)) continue;\\r\\n        $lineArray = explode(\'`\',$line);\\r\\n        $output .= \\"\\\\n   <tr>\\";\\r\\n        foreach($lineArray as $item) {\\r\\n            $item = urldecode($item);\\r\\n            $item = strip_tags($item);\\r\\n            $item = htmlspecialchars($item, ENT_QUOTES, \'UTF-8\');\\r\\n            $item = str_replace(\'&amp;\', \'&\', $item);\\r\\n            $output .= \\"\\\\n      \\" . \'<td style=\\"word-break:break-all;\\" width=\\"\' . $cellWidth . \'\\">\' . $item . \'<\\/td>\';\\r\\n\\r\\n        }\\r\\n        $output .= \\"\\\\n   <\\/tr>\\";\\r\\n    }\\r\\n    $output .= \\"\\\\n<\\/table>\\";\\r\\n    fclose($fp);\\r\\n} else {\\r\\n    $output = \'Could not open: \' . $file;\\r\\n}\\r\\n\\r\\nreturn $output;"}',
        'guid' => '74695a07d6b50979ed55895fea933376',
        'native_key' => 1,
        'signature' => 'b4cdcb1db5f6b5a43580bdf1e1c909cf',
      ),
    ),
    'Plugins' => 
    array (
      'b781a5779b5e8977480082fedbd843d5' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modPlugin',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"LogPageNotFound","description":"LogPageNotFound plugin -- logs page-not-found requests","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\r\\n * LogPageNotFound Plugin\\r\\n *\\r\\n * Copyright 2011-2015 Bob Ray <http:\\/\\/bobsguides.com>\\r\\n *\\r\\n * LogPageNotFound is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * LogPageNotFound is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * LogPageNotFound; if not, write to the Free Software Foundation, Inc., 59 Temple\\r\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package logpagenotfound\\r\\n * @subpackage build\\r\\n *\\/\\r\\n\\r\\n\\r\\nif (!function_exists(\\"get_host\\")) {\\r\\n    function get_host($ip)\\r\\n    {\\r\\n        $ptr = implode(\\".\\", array_reverse(explode(\\".\\", $ip))) . \\".in-addr.arpa\\";\\r\\n        $host = @@dns_get_record($ptr, DNS_PTR);\\r\\n        if ($host == null) {\\r\\n            return $ip;\\r\\n        }\\r\\n        else {\\r\\n            return $host[0][\'target\'];\\r\\n        }\\r\\n    }\\r\\n}\\r\\nif (!function_exists(\\"logLine\\")) {\\r\\n    function logLine($bLogLine, $maxLines, $file)\\r\\n    {\\r\\n\\r\\n        if ($bLogLine) {\\r\\n            $bLogLine = strip_tags($bLogLine);\\r\\n            $bLogLine = htmlspecialchars($bLogLine, ENT_QUOTES, \'UTF-8\');\\r\\n\\r\\n            $log = file($file);\\r\\n            if ($fp = fopen($file, \'a\')) { \\/\\/ tiny danger of 2 threads interfering; live with it\\r\\n                if (count($log) >= $maxLines) {\\r\\n                    fclose($fp);\\r\\n                    while (count($log) >= $maxLines)\\r\\n                    {\\r\\n                        array_shift($log);\\r\\n                    }\\r\\n                    array_push($log, $bLogLine);\\r\\n                    $bLogLine = implode(\'\', $log);\\r\\n                    $fp = fopen($file, \'w\');\\r\\n                }\\r\\n                fputs($fp, $bLogLine);\\r\\n                fclose($fp);\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\/* Don\'t execute in Manager *\\/\\r\\n\\/** @var $modx modX *\\/\\r\\n\\/** @var $scriptProperties array *\\/\\r\\nif ($modx->context->get(\'key\') == \'mgr\') {\\r\\n    return \'\';\\r\\n}\\r\\n$oldSetting = ignore_user_abort(TRUE); \\/\\/ otherwise can screw-up logfile\\r\\n$data[\'page\'] = $_SERVER[\'REQUEST_URI\'];\\r\\n$t = gettimeofday();\\r\\n$data[\'time\'] = date(\'d\\/m\\/y H:i:s:\') . substr($t[\'usec\'], 0, 3); \\/\\/ H:i:s:u\\r\\n$data[\'ip\'] = $_SERVER[\'REMOTE_ADDR\'];\\r\\n$data[\'userAgent\'] = isset($_SERVER[\'HTTP_USER_AGENT\'])\\r\\n        ? $_SERVER[\'HTTP_USER_AGENT\']\\r\\n        : \'<unknown user agent>\';\\r\\n\\r\\n$data[\'host\'] = get_host($data[\'ip\']);\\r\\n$data[\'referer\'] = empty($_SERVER[\'HTTP_REFERER\']) ? \'(empty)\' : $_SERVER[\'HTTP_REFERER\'];\\r\\n$msg = implode(\'`\', $data);\\r\\n\\r\\n$maxLines  = $modx->getOption(\'log_max_lines\',$scriptProperties, 300);\\r\\n$file = $modx->getOption(\'log_path\', $scriptProperties, MODX_CORE_PATH . \'logs\\/pagenotfound.log\', true );\\r\\n\\r\\nlogLine($msg . \\"\\\\n\\", $maxLines, $file);\\r\\n\\r\\nignore_user_abort($oldSetting);\\r\\n\\r\\nreturn \'\';","locked":0,"properties":"a:1:{s:13:\\"log_max_lines\\";a:7:{s:4:\\"name\\";s:13:\\"log_max_lines\\";s:4:\\"desc\\";s:23:\\"lpnf_log_max_lines_desc\\";s:4:\\"type\\";s:7:\\"integer\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"300\\";s:7:\\"lexicon\\";s:26:\\"logpagenotfound:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * LogPageNotFound Plugin\\r\\n *\\r\\n * Copyright 2011-2015 Bob Ray <http:\\/\\/bobsguides.com>\\r\\n *\\r\\n * LogPageNotFound is free software; you can redistribute it and\\/or modify it\\r\\n * under the terms of the GNU General Public License as published by the Free\\r\\n * Software Foundation; either version 2 of the License, or (at your option) any\\r\\n * later version.\\r\\n *\\r\\n * LogPageNotFound is distributed in the hope that it will be useful, but WITHOUT ANY\\r\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\r\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\r\\n *\\r\\n * You should have received a copy of the GNU General Public License along with\\r\\n * LogPageNotFound; if not, write to the Free Software Foundation, Inc., 59 Temple\\r\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\r\\n *\\r\\n * @package logpagenotfound\\r\\n * @subpackage build\\r\\n *\\/\\r\\n\\r\\n\\r\\nif (!function_exists(\\"get_host\\")) {\\r\\n    function get_host($ip)\\r\\n    {\\r\\n        $ptr = implode(\\".\\", array_reverse(explode(\\".\\", $ip))) . \\".in-addr.arpa\\";\\r\\n        $host = @@dns_get_record($ptr, DNS_PTR);\\r\\n        if ($host == null) {\\r\\n            return $ip;\\r\\n        }\\r\\n        else {\\r\\n            return $host[0][\'target\'];\\r\\n        }\\r\\n    }\\r\\n}\\r\\nif (!function_exists(\\"logLine\\")) {\\r\\n    function logLine($bLogLine, $maxLines, $file)\\r\\n    {\\r\\n\\r\\n        if ($bLogLine) {\\r\\n            $bLogLine = strip_tags($bLogLine);\\r\\n            $bLogLine = htmlspecialchars($bLogLine, ENT_QUOTES, \'UTF-8\');\\r\\n\\r\\n            $log = file($file);\\r\\n            if ($fp = fopen($file, \'a\')) { \\/\\/ tiny danger of 2 threads interfering; live with it\\r\\n                if (count($log) >= $maxLines) {\\r\\n                    fclose($fp);\\r\\n                    while (count($log) >= $maxLines)\\r\\n                    {\\r\\n                        array_shift($log);\\r\\n                    }\\r\\n                    array_push($log, $bLogLine);\\r\\n                    $bLogLine = implode(\'\', $log);\\r\\n                    $fp = fopen($file, \'w\');\\r\\n                }\\r\\n                fputs($fp, $bLogLine);\\r\\n                fclose($fp);\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\/* Don\'t execute in Manager *\\/\\r\\n\\/** @var $modx modX *\\/\\r\\n\\/** @var $scriptProperties array *\\/\\r\\nif ($modx->context->get(\'key\') == \'mgr\') {\\r\\n    return \'\';\\r\\n}\\r\\n$oldSetting = ignore_user_abort(TRUE); \\/\\/ otherwise can screw-up logfile\\r\\n$data[\'page\'] = $_SERVER[\'REQUEST_URI\'];\\r\\n$t = gettimeofday();\\r\\n$data[\'time\'] = date(\'d\\/m\\/y H:i:s:\') . substr($t[\'usec\'], 0, 3); \\/\\/ H:i:s:u\\r\\n$data[\'ip\'] = $_SERVER[\'REMOTE_ADDR\'];\\r\\n$data[\'userAgent\'] = isset($_SERVER[\'HTTP_USER_AGENT\'])\\r\\n        ? $_SERVER[\'HTTP_USER_AGENT\']\\r\\n        : \'<unknown user agent>\';\\r\\n\\r\\n$data[\'host\'] = get_host($data[\'ip\']);\\r\\n$data[\'referer\'] = empty($_SERVER[\'HTTP_REFERER\']) ? \'(empty)\' : $_SERVER[\'HTTP_REFERER\'];\\r\\n$msg = implode(\'`\', $data);\\r\\n\\r\\n$maxLines  = $modx->getOption(\'log_max_lines\',$scriptProperties, 300);\\r\\n$file = $modx->getOption(\'log_path\', $scriptProperties, MODX_CORE_PATH . \'logs\\/pagenotfound.log\', true );\\r\\n\\r\\nlogLine($msg . \\"\\\\n\\", $maxLines, $file);\\r\\n\\r\\nignore_user_abort($oldSetting);\\r\\n\\r\\nreturn \'\';"}',
        'guid' => '6f85018e43da7ed1673b3098ee0fd7f0',
        'native_key' => 1,
        'signature' => '87c05a3975ea1b372d1986857e8735f0',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Plugins' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'logpagenotfound',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'php',
      'body' => '{"source":"logpagenotfound-1.0.5-pl\\/modCategory\\/33d1005954c575031466e31f27012a8f.install.script.resolver","type":"php","name":"install.script"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"logpagenotfound-1.0.5-pl\\/modCategory\\/33d1005954c575031466e31f27012a8f\\/1\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"logpagenotfound"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '61af3cccd848b10efcf231a9fe4d2b74',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '33d1005954c575031466e31f27012a8f',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"LogPageNotFound","rank":0}',
);